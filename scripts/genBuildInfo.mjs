import { execSync } from 'node:child_process';
import { writeFileSync, mkdirSync } from 'node:fs';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

function safeExec(cmd) {
  try {
    return execSync(cmd, { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim();
  } catch {
    return '';
  }
}

function escapeTsString(str) {
  return String(str)
    .replace(/\\/g, "\\\\")
    .replace(/'/g, "\\'")
    .replace(/\r?\n/g, "\\n");
}

// Prefer CI-provided envs if present (e.g., Vercel)
const envHash = process.env.VERCEL_GIT_COMMIT_SHA || process.env.GIT_COMMIT || '';
const gitHash = safeExec('git rev-parse --short HEAD');
const commitHash = (envHash || gitHash || 'unknown').slice(0, 12);

// Try to get commit date from git; fall back to now
const gitDate = safeExec('git log -1 --format=%cI');
const commitDate = gitDate || new Date().toISOString();

// Commit subject/message (use CI var if available)
const envMsg = process.env.VERCEL_GIT_COMMIT_MESSAGE || process.env.GIT_COMMIT_MESSAGE || '';
const gitSubject = safeExec('git log -1 --format=%s');
const commitSubjectRaw = envMsg || gitSubject || 'Unnamed commit';
const commitSubject = escapeTsString(commitSubjectRaw);

// Build a proper filesystem path from the module URL (Windows-safe)
const outFile = resolve(dirname(fileURLToPath(import.meta.url)), '../src/lib/buildInfo.ts');
mkdirSync(dirname(outFile), { recursive: true });

const content = `// This file is auto-generated by scripts/genBuildInfo.mjs. Do not edit.
export const COMMIT_HASH = '${commitHash}';
export const COMMIT_DATE = '${commitDate}';
export const COMMIT_SUBJECT = '${commitSubject}';
`;

writeFileSync(outFile, content, 'utf8');
console.log(`[buildInfo] Wrote ${outFile}: ${commitHash} @ ${commitDate} - ${commitSubjectRaw}`);
